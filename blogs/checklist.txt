
    Security Integration: Embed security measures at every development stage.
    Mitigate Vulnerabilities: Address common vulnerabilities in frontend, backend, and database management.
    Compliance: Adhere to industry security standards and regulations.
    Incident Response: Develop skills in detecting and responding to security incidents.

Technical requirements
	

    Encryption and Authentication:

○     Implement strong encryption algorithms for data at rest and in transit.
○     Use multi-factor authentication (MFA) to enhance user security.
○     Ensure secure password storage using hashing algorithms.
 

    Secure APIs:

○     Validate all inputs to prevent injection attacks.
○     Use OAuth 2.0 for secure API authentication and authorization.
○     Ensure proper error handling to avoid exposing sensitive information.
 

    Frontend Security:

○     Mitigate Cross-Site Scripting (XSS) by escaping all user inputs and using Content Security Policy (CSP).
○     Prevent Cross-Site Request Forgery (CSRF) using anti-CSRF tokens.
○     Implement secure cookie attributes (HttpOnly, Secure, SameSite).
 

    Backend Security:

○     Prevent SQL Injection by using parameterized queries and ORM frameworks.
○     Secure session management and ensure proper timeout and invalidation mechanisms.
○     Regularly update and patch server software to close known vulnerabilities.
 

    Database Management:

○     Use encryption for sensitive data storage.
○     Implement role-based access control (RBAC) to limit data access.
○     Ensure secure backup and recovery processes.
Expected outcomes:
	

    Secure Application: A secure application, may not be fully functional, though students should be able to thoroughly describe the security aspects they considered in their projects and display a clear understanding of security vulnerabilities in software development.
    Security Documentation: Comprehensive documentation of security measures, threat models, and risk assessments.
    Incident Response Plan: A detailed plan for responding to security incidents.
    Final Presentation: Demonstration and discussion of the application's security features and development challenges.

Actions for students:
	

    Requirement Analysis: Gather and analyze requirements for the application.
    Design: Develop a detailed design plan, including application architecture and data models.
    Implementation: Write and integrate code for both frontend and backend components.
    Documentation: Maintain comprehensive documentation throughout the project lifecycle.
    Presentation: Prepare and deliver a final presentation demonstrating the application and discussing development experiences.
